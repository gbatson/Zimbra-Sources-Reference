# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Zimlets
# Copyright (C) 2008, 2009, 2010 Zimbra, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 
# Local specific properties file for date zimlet

#Context menu labels
viewDay = Day
appointmentNewTitle = New Appointment
searchForMessages = Search for mail messages

# NOTE: These are here because translators often translate *everything*
#       in a message file, even reserved keywords! So we provide a way
#       to specify translations of those keywords. It avoids a lot of
#       issues this way...

boundaryTrue = true
boundaryFalse = false

#
# Date matching formats
#

# The format{number}.pattern messages contain the regular-expression
# pattern that will be used when looking for matches in text. They
# are standard JavaScript RegExp patterns with a few differences:
#
# 0) All patterns are prefixed and suffixed with the word-boundary
#    regular expression pattern "\\b" by default
#
# This keeps the patterns defined in the translation file clean and
# easier to read. If the pattern should NOT be modified with word-
# boundaries, then the the format{number}.boundary message should
# be set to "false" (or whatever boundaryFalse is defined as).
#
# 1) All occurrences of a space will be replaced by \\s+
#
# This is a convenience so that it's easier for translators to
# understand and create the patterns for the various locales.
#
# 2) All occurrences of (...) will be replaced by (?:...)
#
# Again, this makes the pattern more readable and will cause less
# translation errors.
#
# 3) All occurrences of {keyword} will be replaced by a
#    regular expression for that keyword match.
#
# The following keyword replacements are supported:
#
#   {number}     A number
#   {yearnum}    The 2 or 4-digit year
#   {monthnum}   The month number (January = 1, ...)
#   {monthname}  The name of a month consisting of all of the
#                possible month names defined in AjxMsg: from
#                AjxMsg["calc.monthname.january"] through
#                AjxMsg["calc.monthname.december"].
#   {datenum}    The date number of the month (1..31)
#   {dayname}    The name of the day of the week (Monday, ...)
#   {weekord}    The week ordinal (first, second, ... last)   
#
# For each pattern, there is a format{number}.rule message that
# describes how to convert the matched text into the equivalent
# Date object. These messages follow a specific pattern which
# contains keywords. These keywords are defined in AjxMsg and
# must match or else the patterns will not map correctly to the
# date they represent.
#
# Each date calculator rule is a string that specifies the base
# date/time, optionally followed by a sequence of adjustments to
# that date/time. The base date/time can be specified in two ways.
# It can be specified as the context date/time object using the
# following keyword:
#
#   now
#
# And you can specify a specific date/time using any of the
# following formats: [Note: these patterns follow the formats
# documented in java.util.SimpleDateFormat.]
#
#   yyyy-MM-dd
#   yyyy-MM-dd'T'HH:mm:ss
#   yyyy-MM-dd'T'HH:mm:ss'Z'
#
# NOTE: The last format represents a UTC date; the returned
#       date object is adjusted to local system time.
#
# The following adjustments can be made after specifying the base
# date/time:
#
#   +{number} (second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s])
#   +{number} {monthname}
#   +{number} {dayname}
#   -{number} (second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s])
#   -{number} {month_name}
#   -{number} {day_name}
#   milliseconds={milliseconds}
#   seconds={seconds}[,{milliseconds}]
#   minutes={minutes}[,{seconds}[,{milliseconds}]]
#   hours={hours}[,{minutes}[,{seconds}[,{milliseconds}]]]
#   date={date}
#   month={month}[,{date}]
#   year={year}[,{month}[,{date}]]
#
# NOTE: A translation can add as many (or as few) patterns as they want.
#       The only requirement is that the last pattern be designed with
#       the message "###".
#
# NOTE: Order is important. The patterns that appear first will execute
#       first and their matches will take precedence over later ones.

format1.pattern = (today|tonight|this morning)
format1.rule = now
format1.boundary = true

format2.pattern = tomorrow
format2.rule = now +1 day
format2.boundary = true

format3.pattern = yesterday
format3.rule = now -1 day
format3.boundary = true

# e.g. next Thursday
format4.pattern = (this|next) {dayname}
format4.rule = now +1 {dayname}
format4.boundary = true

# e.g. last Thursday
format5.pattern = last {dayname}
format5.rule = now -1 {dayname}
format5.boundary = true

# e.g. first Wed in April
format6.pattern = {weekord} {dayname} (of|in) {monthname}
format6.rule = now date=1 +1 {monthname} {weekord} {dayname}
format6.boundary = true

# e.g. 3rd Monday
format7.pattern = {weekord} {dayname}
format7.rule = now {weekord} {dayname}
format7.boundary = true

# e.g. 1st of Dec
format8.pattern = {datenum}(st|nd|rd|th)? (of|in)? {monthname}
format8.rule = now month={monthname},{datenum}
format8.boundary = true

# e.g. Jan 16th, 1973
format9.pattern = {monthname}.? {datenum}(st|nd|rd|th)?, {yearnum}
format9.rule = {yearnum}-01-01 month={monthname},{datenum}
format9.boundary = true

# e.g. Jan 16th
format10.pattern = {monthname}.? {datenum}(st|nd|rd|th)?
format10.rule = now month={monthname},{datenum}
format10.boundary = true

# e.g. Wed, 30 January 1980
format11.pattern = {dayname}, {datenum} {monthname} {yearnum}
format11.rule = {yearnum}-01-01 month={monthname},{datenum}
format11.boundary = true

# e.g. 30 January 1980
format12.pattern = {datenum} {monthname} {yearnum}
format12.rule = {yearnum}-01-01 month={monthname},{datenum}
format12.boundary = true

# e.g. 9/23/1970
format13.pattern = {monthnum}/{datenum}/{yearnum}
format13.rule = {yearnum}-{monthnum}-{datenum}
format13.boundary = true

# e.g. 1970-09-23
format14.pattern = {yearnum}-{monthnum}-{datenum}
format14.rule = {yearnum}-{monthnum}-{datenum}
format14.boundary = true

# e.g. Mar 2008
# NOTE: Set the first day of the month to avoid roll-over!
# Matching monthname only if followed by year [bug 30634] 
format15.pattern = {monthname} {yearnum}
format15.rule = {yearnum}-01-01 month={monthname}
format15.boundary = true

# e.g. Thurs
format16.pattern = {dayname}
format16.rule = now +1 {dayname}
format16.boundary = true

# e.g. 16th Jan, 1973
format17.pattern = {datenum}(st|nd|rd|th)? {monthname},? {yearnum}
format17.rule = {yearnum}-01-01 month={monthname},{datenum}
format17.boundary = true

# e.g. Wednesday, October 08
format18.pattern = {dayname}, {monthname} {datenum}
format18.rule = now month={monthname},{datenum}
format18.boundary = true

# NOTE: Placeholders so that more formats can be added.
#
# Here is an example of a holiday
#
#   format15.pattern = Christmas
#   format15.rule = now month=12,25
#
# Here is an example of the Japanese Meiji-era year. Notice
# the use of specifying of the "format16.boundary" message.
# This tells the date zimlet to NOT create the corresponding
# regular expression with word-boundary (\\b) around the
# pattern. By default, these are added for convenience so
# that the pattern are more human-readable. But adding them
# for Asian patterns makes matching fail.
#
#   format16.pattern = \u660e\u6cbb{number}\u5e74
#   format16.rule = 1868-01-25 +{number} years -1 year
#   format16.boundary = false
#
# NOTE: The "-1 year" in the above example is extraneous
#       because I could just decrement the start of the Meiji
#       era by one. You need to either subtract one year from
#       the base date or subtract one year after the calculation
#       because Meiji 1 is 1868. But the rule "1868-01-25 +1 year"
#       would be 1869! So we subtract one year at the end. 

format19.pattern = ###
format19.rule = ###
format19.boundary = true

format20.pattern = ###
format20.rule = ###
format20.boundary = true

format21.pattern = ###
format21.rule = ###
format21.boundary = true

format22.pattern = ###
format22.rule = ###
format22.boundary = true

format23.pattern = ###
format23.rule = ###
format23.boundary = true

format24.pattern = ###
format24.rule = ###
format24.boundary = true

format25.pattern = ###
format25.rule = ###
format25.boundary = true

format26.pattern = ###
format26.rule = ###
format26.boundary = true

format27.pattern = ###
format27.rule = ###
format27.boundary = true

format28.pattern = ###
format28.rule = ###
format28.boundary = true

format29.pattern = ###
format29.rule = ###
format29.boundary = true

format30.pattern = ###
format30.rule = ###
format30.boundary = true
